<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" type="xml"?>
<book version="5.0" xmlns="http://docbook.org/ns/docbook" xmlns:ns52="http://www.w3.org/1999/xhtml"
  xmlns:ns5="http://www.w3.org/1999/xlink" xmlns:ns4="http://www.w3.org/2000/svg"
  xmlns:ns3="http://www.w3.org/1998/Math/MathML" xmlns:ns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="en">
  <info>
    <title>The KnitML User's Guide</title>
    <author>
      <personname>Jonathan Whitall</personname>
      <email>fiddlerpianist@gmail.com</email>
    </author>
  </info>
  <part>
    <title>Getting Started</title>
    <chapter>
      <title>Introduction</title>
      <sect1>
        <title>Overview</title>
        <para>The KnitML project's goal is to define and promote the adoption of a standard content
          model for knitting patterns. By developing a community-supported specification and
          providing basic rendering and transformation tools, the project aims to make KnitML easy
          to use and valuable to the knitter.</para>
        <para>Knitting patterns are algorithms as much as they are documents. Consequently, it is
          important that a computer to be able to understand the algorithm so that it can make
          decisions. At the same time, a pattern must be able to be rendered into a published
          pattern in human-readable form. A KnitML pattern, therefore, is a formalization of the
          algorithm required to produce a knitted object, composed in a way that can still be
          rendered as a comprehensible published pattern.</para>
        <para>The tools provided by the KnitML Project are meant to show the value of KnitML to the
          knitting community by demonstrating the advantages to standardizing on a content model.
          They are by no means exhaustive. Independent efforts to write software which understands
          KnitML patterns (such as the Knitter project) are already underway. </para>
      </sect1>
      <sect1>
        <title>Pattern Formats</title>
        <para>KnitML patterns are expressed primarily using a technology called XML (Extensible
          Markup Language). XML is an international standard for expressing custom document markup.
          KnitML provides validation rules to an XML parser (in the form of a schema) which ensures
          that the knitting pattern follows the expected syntax. If you use an XML authoring tool to
          develop KnitML patterns, the software's suggestions and completion tools will help you
          more quickly gain an understanding of the XML syntax.</para>
        <para annotations="Find citation">XML is well suited to serve as an interchange format for
          software, though it is not without its disadvantages. For one, it's not a particularly
          compact syntax, nor does it flow, read, or even resemble a traditional knitting pattern.
          While XML is a language that is human readable, it is not intended to be directly edited
          by humans. Ideally, a KnitML authoring tool would do this and make pattern designers'
          lives easier.</para>
        <para annotations="Find citation">The Knitting Expression Language, or KnittingEL, attempts
          to provide a far easier way to express a KnitML pattern. A KnittingEL pattern uses
          familiar knitting pattern language constructs and is more free form in nature. As a
          result, it looks more like a published knitting pattern than its XML counterpart.
          KnittingEL is not intended to be a software interchange format; it is a pattern authoring
          tool only. Patterns written in KnittingEL are converted to XML before passed to supporting
          software (such as the validator and the pattern renderer).</para>
        <para>While we encourage all patterns to be developed in KnittingEL, tooling support is
          limited to basic text editing. Because of this, it's pretty easy to create KEL files that
          will produce invalid XML files. XML tooling is far more extensive and will better be able
          to guide the pattern designer to create a valid pattern.</para>
      </sect1>
      <sect1>
        <title>Known Limitations</title>
        <itemizedlist>
          <listitem>
            <para>You cannot currently express seaming knitted edges together</para>
          </listitem>
          <listitem>
            <para>Provisional cast ons are not yet supported</para>
          </listitem>
          <listitem>
            <para>Support for picking up stitches is somewhat limited (because edges cannot be
              expressed)</para>
          </listitem>
          <listitem>
            <para>n-sized decreases are not yet supported (where n is more than a double
            decrease)</para>
          </listitem>
          <listitem>
            <para>repeats are completely literal (there is no way to express a soft repeat)</para>
          </listitem>
        </itemizedlist>
      </sect1>
    </chapter>
    <chapter>
      <title>Installing and Running KnitML</title>
      <sect1>
        <title>Installation</title>
        <para>KnitML requires Java 1.5 (or higher) to run. If you do not have Java 1.5 installed,
          please visit the Sun website to download it (http://java.sun.com).</para>
        <para>To set up your machine to run the <code>knitml</code> executable, you must:</para>
        <orderedlist>
          <listitem>
            <para>Set the <code>JAVA_HOME</code> environment variable to the root directory of your
              Java installation (for example <code>C:\Program Files\Java\jre1.5.0_11</code>)</para>
          </listitem>
          <listitem>
            <para>Set the <code>KNITML_HOME</code> environment variable to the root directory of
              where you unzipped the KnitML distribution (for example C:\Program
            Files\knitml-0.4).</para>
          </listitem>
          <listitem>
            <para>For Windows, set the <code>KNITML_HOME/bin</code> directory in your PATH
              environment variable so that the <code>knitml</code> command can be run from any
              directory. (The actual value will be <code>%KNITML_HOME%/bin</code> appended to the
              end of the PATH variable.)</para>
          </listitem>
        </orderedlist>
        <para>For Windows XP, you can set environment variables from the Start menu. Select
          Settings, then Control Panel, then System. Select the Advanced tab, then press the
          Environment Variables button, highlight the System Variable (or User Variable) with the
          name you want, click Edit, add or append the desired value, then click OK twice.
        (Whew!)</para>
      </sect1>
      <sect1>
        <title>Project Layout</title>
        <para>The <code>samples</code> directory contains several different patterns to showcase the
          both XML and KnittingEL patterns: </para>
        <itemizedlist>
          <listitem>
            <para>A simple square (for use with the tutorial in this document)</para>
          </listitem>
          <listitem>
            <para>A sampler swatch (includes color work and cables)</para>
          </listitem>
          <listitem>
            <para>A basic sock</para>
          </listitem>
          <listitem>
            <para>A sock based from the Nutkin pattern (called Nutkin2)</para>
          </listitem>
        </itemizedlist>
        <para>The <code>conf</code> directory contains files which configure the way KnitML runs. It
          includes logging configuration as well as several files which configure the validator and
          pattern renderer. The conf directory is added to the classpath when a <code>knitml</code>
          command is executed.</para>
        <para>The pattern renderer uses a set of property files (called a resource bundle) built
          into the module that allow rendering in different languages. Currently, KnitML provides
          support for both English and Spanish rendering. This will expand as people contribute more
          languages. If you would like to add support for a new language, see <xref
            xlink:href="#adding-support-for-a-new-language"/>.</para>
        <para>You can use your own property file to further customize how a pattern will look when
          it is rendered. See <xref xlink:href="#personalizing-patterns"/> for guidance.</para>
      </sect1>
      <sect1>
        <title>Processing XML files</title>
        <para>To process a KnitML file in XML format, first change to the directory where your XML
          file is located, then run one of the following commands:</para>
        <itemizedlist>
          <listitem>
            <programlisting>knitml validate &lt;xml-filename>
                [-output &lt;validated-filename>]
                [-checksyntax]</programlisting>
            <para>Creates a validated XML file from an unvalidated XML file</para>
          </listitem>
          <listitem>
            <programlisting>knitml render &lt;xml-filename>
              [-output &lt;pattern-filename>]
              [-checksyntax]</programlisting>
            <para>Renders a pattern from a validated XML file</para>
          </listitem>
          <listitem>
            <programlisting>knitml validateAndRender &lt;xml-filename>
                         [-output &lt;pattern-filename>]
                         [-checksyntax]</programlisting>
            <para>Renders a pattern from an unvalidated XML file</para>
          </listitem>
        </itemizedlist>
        <para>If the <code>-output</code> option is not specified, the result will be sent to the
          screen (i.e. "standard out"). The <code>-checksyntax</code> option performs XML schema
          validation against the provided file. You do not need to be connected to the Internet to
          check the syntax, as the software is configured to resolve the XML schemas provided with
          the KnitML core JAR file.</para>
        <para>You can also use the following shortcuts: <code>r</code> for <code>render</code>,
            <code>v</code> for <code>validate</code>, <code>vr</code> for
          <code>validateAndRender</code>.</para>
      </sect1>
      <sect1>
        <title>Processing KEL files</title>
        <para>To process a KnitML file in KEL format, first change to the directory where the KEL
          file is located, then run the appropriate KnitML command:</para>
        <itemizedlist>
          <listitem>
            <para>
              <code>knitml convert &lt;knittingEL-filename&gt; [-output &lt;knitml-filename&gt;]
                [-checksyntax]</code>
            </para>
            <para>Converts a KEL file to an unvalidated XML file</para>
          </listitem>
          <listitem>
            <para>
              <code>knitml convertAndValidate &lt;knittingEL-filename&gt; [-output
                &lt;validated-knitml-filename&gt;] [-checksyntax]</code>
            </para>
            <para>Converts a KEL file to a validated XML file</para>
          </listitem>
          <listitem>
            <para>
              <code>knitml convertValidateAndRender &lt;knittingEL-filename&gt; [-output
                &lt;pattern-filename&gt;] [-checksyntax]</code>
            </para>
            <para>Converts a KEL file directly to a rendered pattern</para>
          </listitem>
        </itemizedlist>
        <para>
          <code>-output</code> and <code>-checksyntax</code> behave as described in the previous
          section.</para>
        <para>You can also use the following shortcuts: <code>c</code> for <code>convert</code>,
            <code>cv</code> for <code>convertAndValidate</code>, <code>cvr</code> for
            <code>convertValidateAndRender</code>.</para>
      </sect1>
    </chapter>
  </part>
  <part>
    <title>Writing KnitML Patterns</title>
    <chapter>
      <title>The Knitting Expression Language</title>
      <sect1>
        <title>Overview</title>
        <para>The Knitting Expression Language (formerly known as GroovyKnit) is based on the Groovy
          programming language and GroovyMarkup architecture
            (<uri>http://groovy.codehaus.org/GroovyMarkup</uri>). Elements are specified by name,
          and sub-elements go between curly braces following the name. So this in KnittingEL:</para>
        <programlisting>pattern {
  generalInformation
}</programlisting>
        <para>looks like this in XML:</para>
        <programlisting>&lt;pattern>
  &lt;general-information/>
&lt;/pattern></programlisting>
        <para>
          <code>generalInformation</code> in KnittingEL became <code>general-information</code> in
          XML because <code>generalInformation</code> is a defined KnittingEL function that acts as
          an intermediary to the XML format to increase readability. In this case, it simply
          transforms its name to <code>general-information</code>, as you cannot use dashed names in
          KnittingEL without quoting them. So while you could also do the following to achieve the
          same result, it's not quite as readable.</para>
        <para>
          <programlisting>pattern {
  'general-information'
}</programlisting>
        </para>
        <para>See <xref xlink:href="#el-function-table"/> for a complete list of KnittingEL
          functions.</para>
        <para>You have the option to capitalize the first letter of any and all KnittingEL
          functions. So the following would produce the same XML:</para>
        <para>
          <programlisting>Pattern {
  GeneralInformation
}</programlisting>
        </para>
        <para>In many cases, this is more readable.</para>
        <para>To specify an XML element's value as text, simply include it as a parameter. This:</para>
        <para><programlisting>row {
  knit (3)
}</programlisting>Becomes:</para>
        <para>
          <programlisting>&lt;row>
  &lt;knit>3&lt;/knit>
&lt;/row></programlisting>
        </para>
        <para>Note that any of the samples below will produce the same XML as above (this is not an
          exhaustive list of possibilities):</para>
        <para>
          <programlisting>row {
  knit 3
}

Row {
  Knit 3
}

row { knit 3 }

row { k 3 }

row { k3 }

Row: k3</programlisting>
        </para>
        <para>The first three examples show that line placement inside of curly braces isn't
          crucial, as long as the method name and its arguments (which occur before the curly
          braces) are on the same line<footnote>
            <para>Even parameters can be on a different line if parentheses are explicitly
              specified. Map arguments delineated by [] can also be split across lines. However, a
              row which uses the colon syntax must be completely defined on the same line.</para>
          </footnote>. The last three examples use k as a shorthand for knit. <code>k</code> is a
          defined KnittingEL function which expands to the <code>knit</code> element. The KnittingEL
          parser is smart enough to recognize that, since <code>k3</code> ends with a number, the
          number belongs as an argument to the <code>k</code> method rather than part of the method
          name.</para>
        <para>To express several knitting operations in a row, you can write them in any of the
          following ways:</para>
        <para><programlisting>row {
  knit 3
  purl 3
}

row { knit 3, purl 3 }

row ( k3, p3 }

row: k3, p3

Row: k3, p3</programlisting>And
          you'll get this:</para>
        <para>
          <programlisting>&lt;row&gt;
  &lt;knit&gt;3&lt;/knit&gt;
  &lt;purl&gt;3&lt;/purl&gt;
&lt;/row&gt;</programlisting>
        </para>
        <para>Note that you can use the <code>:</code> syntax to define a row instead of the brace
          notation, in which case the entire row must be defined on the same line. If you have a
          more complex row to define that needs to be split into multiple lines, use the
          <code>{}</code>s instead.</para>
        <para>You can use the : syntax for any of the following functions: <code>row</code>,
            <code>round</code>, <code>nextRow</code>, <code>nextRound</code>, <code>shortRow</code>.
          The <code>:</code> syntax used with other functions exists for language purposes only and
          is simply ignored (producing the same effect as if it were omitted).</para>
        <para>KnittingEL also defines shorthands for common operations. Here are a few:</para>
        <informaltable frame="none">
          <tgroup cols="2">
            <colspec colname="KnittingEL" colnum="1"/>
            <colspec colname="XML" colnum="2"/>
            <thead>
              <row>
                <entry>KnittingEL</entry>
                <entry>XML</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <programlisting>row { k to end }</programlisting>
                </entry>
                <entry>
                  <programlisting>&lt;row>
  &lt;repeat until="end">
    &lt;knit/>
  &lt;/repeat>
&lt;/row>                </programlisting>
                </entry>
              </row>
              <row>
                <entry>
                  <programlisting>round { k5 }</programlisting>
                </entry>
                <entry>
                  <programlisting>&lt;row type="round">
  &lt;knit>5&lt;/knit></programlisting>
                </entry>
              </row>
              <row>
                <entry>
                  <programlisting>shortRow { k5, turn }</programlisting>
                </entry>
                <entry>
                  <programlisting>&lt;row short="true">
  &lt;knit>5&lt;/knit>
  &lt;turn/>
&lt;/row></programlisting>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
        <para>An element's attributes appear before the curly braces in a series of name/value pairs
          in a bracket (called a Map):</para>
        <para>
          <programlisting>yarnType [brand:'Cotton Classic', weight:'worsted'] { ... }</programlisting>
        </para>
        <para>It's very common for an element to have an ID attribute, so there is often a function
          shorthand. For example, the following three lines are equivalent:</para>
        <para>
          <programlisting>yarnType 'my-yarn' [brand:'Cotton Classic', weight:'worsted']
yarnType [id:'my-yarn', brand:'Cotton Classic', weight:'worsted']
&lt;yarn-type id="my-yarn" brand="Cotton Classic" weight="worsted"/></programlisting>
        </para>
      </sect1>
      <sect1>
        <title>Writing a Simple Pattern</title>
        <para>For this example, we will compose the KnitML pattern using the KnittingEL syntax. The
          pattern is for a simple 4x4 in square knitted in stockinette stitch.</para>
        <para>Create a file name <ns:code>simple-square.kel</ns:code>. We will start by defining the
            <code>pattern</code> element, the root element for all KnitML patterns. Since we're not
          internationalizing this pattern, we'll specify that it was written in <code>'en'</code>
          (the ISO-639 Language Code for English).<programlisting>Pattern 'en' {}</programlisting></para>
        <para>Next, we'll add some header information about the pattern to a
            <code>generalInformation</code> element within the <code>pattern</code>
          element.<programlisting>Pattern 'en' {
  GeneralInformation {}
}</programlisting></para>
        <para>Let's give the pattern a name. Name, description, author, etc. go under
            <code>generalInformation</code>. Anything that should be interpreted as a literal value
          (for instance, a string of text) should be in single quotes.</para>
        <para>
          <programlisting>Pattern 'en' {
  GeneralInformation {
    Name: 'Simple Square'
    Description: 'A simple square'
    Dimensions: '4 in by 4 in'
  }
}</programlisting>
        </para>
        <para>Gauge also goes here. We'll indicate that the gauge swatch should be knit in
          stockinette at 6 stitches to the inch and 6 rows to the inch.</para>
        <para><programlisting>Pattern 'en' {
  GeneralInformation {
    Name: 'Simple Square'
    Description: 'A simple square'
    Dimensions: '4 in by 4 in'
    Gauge 'stockinette' {
      StitchGauge: 6 stitchesPerInch
      RowGauge: 6 rowsPerInch
    }
  }
}</programlisting>The
          colon after the function name is optional. It increases readability in this case<footnote>
            <para>Note that using a colon here has a slightly different implication than using it
              with the <code>row</code> family of functions, as was previously discussed.</para>
          </footnote>.</para>
        <para>Let's move on to the next section. We also need some supplies to knit this pattern.
          Generally a knitter needs needles and yarn, and needs to know what type of each the
          pattern calls for. In this case, we're not particularly picky about the yarn (as long as
          it is plausible for obtaining gauge). The only thing we are going to specify is that the
          weight should be worsted. Likewise, we are going to specify using a size US 4 circular
          needle of any length.</para>
        <para><programlisting>Pattern 'en' {
  GeneralInformation { ... }
  Supplies {
    Yarns {
      YarnType 'the-yarn' [weight:'worsted']
    }
    Needles {
      needleType 'size-4' circular { size: 4 US }
      needle 'the-needle' [typeref:'size-4']
    }
  }
}</programlisting>First
          we added a <code>yarns</code> sub-element to the supplies element. This is where the yarns
          that will be used in the pattern are defined. Both yarn types (e.g. brand, weight, etc.)
          and yarn colors of a specific type may appear. In this case, we are only using one type of
          yarn (with an identifier of 'worsted-weight-yarn' so that we can refer to it later in the
          pattern if need be). As we don't care about color, there are no <code>yarn</code> elements
          to define.</para>
        <para>Similarly, we have a needles element where all of the needles that will be used in the
          pattern are defined. Both needle types (e.g. DPN, circular, and other attributes) and
          number of needles of a particular needle type must be defined. Here we define one needle
          type we're identifying as 'size-4'. It's a circular needle ('circular') and its size is US
          4. We also define that we need one needle of type 'size-4' and we're going to call that
          needle 'the-needle' (since this project only uses one needle).</para>
        <para>Now we will add directions.</para>
        <para><programlisting>Pattern 'en' {
  ...
  Directions {}
}</programlisting>Since our gauge
          is 6 stitches to the inch and we want to knit a 4-inch square, the first thing to do is to
          cast on 24 stitches (6 times 4). You can specify a cast-on method if desired. In this
          case, we'll specify that the knitter should use the long-tail cast on.</para>
        <para>
          <programlisting>Pattern 'en' {
  ...
  Directions {
    CastOn 24 'long-tail'
  }
}</programlisting>
        </para>
        <para>Stockinette stitch is a two-row repeat when knitting flat. The first row is all knit,
          and the second is all purled.</para>
        <para><programlisting>Pattern 'en' {
  ...
  Directions {
    CastOn 24 'long-tail'
    Row 1: k to end
    Row 2: p to end
  }
}</programlisting>Since
          the project's dimensions should be 4 inches tall as well as wide, we don't want to have to
          write out 22 more rows of the same two rows. So we will declare rows 1 and 2 to be an
          instruction, give that instruction an identifier ('stockinette-st'), and then repeat it a
          certain number of times. In this case, we will repeat the two stockinette rows until the
          project measures 4 inches. KnitML also calculates row numbers for you if not provided, so
          we will remove them.</para>
        <para><programlisting>Pattern 'en' {
  ...
  Directions {
    CastOn 24 'long-tail'
    Instruction 'stockinette-st' {
      Row: k to end
      Row: p to end
    }
    Repeat 'stockinette-st' until measures 4 in
  }
}</programlisting>
          <code>until measures</code> are keywords which inform the KnittingEL processor to
          construct the particular XML form when an instruction is repeated to a measurement. There
          are various other keywords in the KnittingEL. See the appendix for a list of them.</para>
        <para>Now that we've reached 4 inches, we will finish the project by binding off all
          stitches.</para>
        <para><programlisting>Pattern 'en' {
  ...
  Directions {
    CastOn 24 'long-tail'
    Instruction 'stockinette-repeat' {
      Row: k to end
      Row: p to end
    }
    Repeat 'stockinette-st' until measures 4 in
    Row: BindOff all sts
  }
}
</programlisting>That's
          all there is to it! The complete pattern looks like this:</para>
        <para><programlisting>Pattern 'en' {
  GeneralInformation {
    Name: 'Simple Square'
    Description: 'A simple square'
    Dimensions: '4 in by 4 in'
    Gauge 'stockinette' {
      StitchGauge: 6 stitchesPerInch
      RowGauge: 6 rowsPerInch
    }
  }
  Supplies {
    Yarns {
      YarnType 'the-yarn' [weight:'worsted']
    }
    Needles {
      NeedleType 'size-4' circular { size: 4 US }
      Needle 'the-needle' [typeref:'size-4']
    }
  }
  Directions {
    CastOn 24 'long-tail'
    Instruction 'stockinette-st' {
      Row: k to end
      Row: p to end
    }
    Repeat 'stockinette-st' until measures 4 in
    Row: BindOff all sts
  }
}
</programlisting>If
          you run this through the basic text rendering program, you'll get this:</para>
        <para>
          <programlisting>Simple Square
A simple square

Stitch Gauge: 6 st/in
Row Gauge: 6 row/in

Yarn:
    worsted weight

Needles:
    1 circular needle size 4 US (3.5 mm)

Directions
----------
Using the long-tail method, cast on 24 stitches.
Row 1: Knit
Row 2: Purl
Repeat rows 1-2 for 4 in.
Row 25: Bind off all stitches</programlisting>
        </para>
        <para>This may not appear to be worth all of the trouble, but keep a few things in mind.
          First of all, the pattern has been "test knit." This means If there were too many or two
          few stitches for any given row, the validator would raise an error. This can be very
          helpful because it can catch certain kinds of errata immediately. The validator also fills
          in missing information as it's being knit. Notice that all of the rows have been assigned numbers.<footnote>
            <para>Also note that the bind off row is labeled as Row 25. That's because the pattern's
              row gauge is set to 6 rows per inch, and the repeat was done for 4 inches. That would
              make the next row knit row 25.</para>
          </footnote></para>
        <para>Second, note that our needle size was automatically converted to metric. There are
          various options on the pattern renderer that will allow you to use the system of units
          most familiar to you, regardless of what the original pattern was written in. (Note that
          the pattern renderer does not currently support these options, but it will in a future
          release.)</para>
        <para>Here is the gauge specification in metric:</para>
        <para><programlisting>Simple Square
A simple square

Stitch Gauge: 2.4 st/cm
Row Gauge: 2.4 row/cm
...</programlisting>Also
          note that, even though we specified that the pattern is written in English, this pattern
          can (for the most part) be rendered in another language very easily. Simply setting the
          renderer to use Spanish (using pattern conventions from Spain) produces this result:</para>
        <para>
          <programlisting>...
Instrucciones
-------------
Usando el montado doble, monta 24 puntos.
Hilera 1: Todo del derecho
Hilera 2: Todo del reves
Repite hileras 1-2 hasta que la pieza mida 4 in.
...</programlisting>
        </para>
        <para>Note that the header information (i.e. the parts of the pattern written in English)
          would always be written in English unless you internationalized them. See <xref
            xlink:href="#internationalization"/> for more information.</para>
      </sect1>
      <sect1>
        <title>Improving the Pattern</title>
        <para>Our simple square pattern renders fine. There are, however, a couple of quirks that we
          can eliminate. The first is that there are not line breaks where you would expect them to
          be in a traditional pattern. You can fix this by adding section elements to break the
          pattern up into logical paragraphs.</para>
        <para><programlisting>Pattern 'en' {
...
    Section {
      CastOn 24 'long-tail'
    }
    Section {
      Instruction 'stockinette-st' {
        Row: k to end
        Row: p to end
      }
      Repeat 'stockinette-st' until measures 4 in
    }
    Section {
      Row: BindOff all sts
    }
  }
}</programlisting>The
          renderer will produce:</para>
        <para><programlisting>...
Directions
----------
Using the long-tail method, cast on 24 stitches.

Row 1: Knit
Row 2: Purl
Repeat rows 1-2 for 4 in.

Row 25: Bind off all stitches</programlisting>Here's
          another thought. A pattern designer may want to define more than one instruction group in
          the pattern. Think about knitting a sock, for instance. There are separate instructions
          for knitting the cuff, leg, heel flap, heel turn, gusset, foot, and toe. Being able to add
          headers to each instruction group would be very useful.</para>
        <para>You can add instruction groups in the directions and label them.</para>
        <para><programlisting>pattern 'en' {
...
    <emphasis>InstructionGroup [label:'Cast On'] {</emphasis>
      CastOn 24 'long-tail'
<emphasis>    }
    InstructionGroup [label:'Make the Square'] {
</emphasis>      Instruction 'stockinette-st' {
        Row: k to end
        Row: p to end
      }
      Repeat 'stockinette-st' until measures 4 in
<emphasis>    }
    InstructionGroup [label:'Finish It Off!'] {
</emphasis>      Row: bindOff all sts
<emphasis>    }
</emphasis>...
}</programlisting>This
          would look like:</para>
        <programlisting>Directions
----------
Cast On
-------
Using the long-tail method, cast on 24 stitches.

Make The Square
---------------
Row 1: Knit
Row 2: Purl
Repeat rows 1-2 for 4 in.

Finish It Off!
--------------
Row 25: bind off all stitches</programlisting>
        <para>Another quirk is that you probably would not see the bind off row expressed as Row 25.
          To reset the row count for this instruction group, add the keyword
          <code>resetRowCount</code> to the definition:</para>
        <para><programlisting>Pattern 'en' {
...
    InstructionGroup [label:'Finish It Off!'] resetRowCount {
      Row: BindOff all sts
    }
...
}</programlisting>This
          will produce:</para>
        <para><programlisting>Finish It Off!
--------------
Row 1: Bind off all stitches</programlisting>Alternatively,
          you may not want the row numbered at all, in which case you can do this:</para>
        <para><programlisting>Pattern 'en' {
...
    InstructionGroup [label:'Finish It Off!'] {
      NextRow: BindOff all sts
    }
...
}</programlisting>and
          you will get:</para>
        <para>
          <programlisting>...
Finish It Off!
--------------
Next Row: Bind off all stitches</programlisting>
        </para>
      </sect1>
    </chapter>
    <chapter>
      <title>The XML Pattern</title>
      <para>TODO</para>
    </chapter>
    <chapter xml:id="internationalization">
      <title>Internationalization</title>
      <para>TODO</para>
    </chapter>
  </part>
  <part>
    <title>Customizing and Extending KnitML</title>
    <chapter>
      <title>Customizing the Pattern Renderer</title>
      <sect1>
        <title>Overview</title>
        <para>The <code>operations</code> resource bundle used to render patterns is embedded in the
            <code>knitml-pattern-renderer.jar</code> file. For your reference, the master resource
          bundle file has been copied to <code>KNITML_HOME/conf/local-operations.properties</code>.
          If you open it, you will see a list of name / value pairs, each separated by an equals
          sign and delineated by line. Each entry constitutes a phrase in a knitting pattern, with
          parameters supplied to it by the renderer and referenced by <code>{0}</code> (for the
          first parameter), <code>{1}</code> (for the second parameter), etc. You will base any
          customizations you make to the renderer on this file.</para>
      </sect1>
      <sect1 xml:id="personalizing-patterns">
        <title>Personalizing Patterns</title>
        <para>As knitters are a diverse group of individuals, knitters often use different notations
          and conventions to express the same technique. Sometimes terms vary regionally differ, and
          other times the techniques vary slightly but produce the same result.</para>
        <para>Knitting a stitch so that it is twisted is a good example of a technique which can be
          described using different terms. Most knitters know this technique by the term "knitting
          through the back loop." This term, however, assumes that the mount of the stitch being
          worked is not reversed. While that generally is true if you are a western knitter, it is
          not necessarily true if you are a combination knitter. In combination knitting, if the
          same stitch in the previous row had been purled, the mount of that stitch would be
          reversed. If that is true, the back loop would <emphasis>not</emphasis> be the loop to
          knit to create a twisted stitch; it would be the front loop. It is more accurate to
          describe the loop to knit as the "trailing" loop instead of the "back" loop<footnote>
            <para>In fact, the associated entries in the <code>operations.properties</code> file
              that render a twisted knit stitch are tagged "through-trailing-loop" and are described
              as such in the XML form. This is because it is more accurate, not because it is a more
              common term.</para>
          </footnote>.</para>
        <para>Another example is the yarn-over increase. Most commonly this is known by the
          abbreviation <code>yo</code> but can also be represented by <code>yfon</code> (yarn
          forward and over needle), <code>yfrn</code> (yarn forward and 'round needle),
          <code>yon</code> (yarn over needle), and <code>yrn</code> (yarn 'round needle).</para>
        <para>You can instruct the renderer to use your favorite terms for knitting techniques
          instead of the defaults. Open the <code>custom-operations.properties</code> file in the
            <code>KNITML_HOME/conf</code> directory and copy over the entries you want to customize
          from <code>local-operations.properties</code>. A few samples are included in the comments
          (including the yarn-over customizations described above). To use one of them, simply
          remove the beginning <code>#</code> sign (which designates a comment) from the line you
          want to use.</para>
        <para>Let's suppose a pattern I've rendered looks like this:</para>
        <para>
          <programlisting>Row 1: k12, yo, k1</programlisting>
        </para>
        <para>To make the yarn-over increase look like <code>yrn</code> (yarn 'round needle), I
          would open up <code>custom-operations.properties</code> and edit this line:</para>
        <para>
          <programlisting>#operation.increase.yo=yrn</programlisting>
        </para>
        <para>and make it look like this:</para>
        <para>
          <programlisting>operation.increase.yo=yrn</programlisting>
        </para>
        <para>Now my pattern would render like this:</para>
        <para>
          <programlisting>Row 1: k12, yrn, k1</programlisting>
        </para>
        <para>To change the way knits render, I could add this line:</para>
        <para>
          <programlisting>operation.knit.$$$=k {0} st;k {0} sts</programlisting>
        </para>
        <para>and it would look like this<footnote>
            <para>Plurals are covered in the next section of this chapter.</para>
          </footnote>:</para>
        <para>
          <programlisting>Row 1: k 12 sts, yrn, k 1 st</programlisting>
        </para>
        <para>There are several more examples of personalizations in the
            <code>custom-operations.properties</code> file.</para>
      </sect1>
      <sect1 xml:id="adding-support-for-a-new-language">
        <title>Adding Support for a New Language</title>
        <sect2>
          <title>Configuring your Environment</title>
          <para>To add a new language to the renderer, copy
              <code>KNITML_HOME/conf/local-operations.properties</code> to a file named
              <code>operations.properties</code> in the same directory. Next, tell the pattern
            renderer to use the local <code>operations</code> resource bundle rather than the one
            that's bundled with the pattern renderer. Do this by opening the
              <code>pattern-renderer-config.properties</code> file in the
            <code>KNITML_HOME/conf</code> directory and removing the <code>#</code> sign in front of
            the <code>messageSource.basename</code> property.</para>
          <para>Next, open the <code>operations.properties</code> file you just created and
            translate the values (to the right of the equal signs) to the target language. The name
            of each entry aims to be fairly intuitive. Ine the case of more complex entries, a
            comment (a line starting with <code>#</code>) appears above the entry.</para>
        </sect2>
        <sect2>
          <title>Handling Plurals</title>
          <para>In short, every language has a set of plural forms. Many western languages use one
            form for the number 1, and a second form for everything else. This is by no means
            universal. Chinese, for instance, has only one plural form, while Scottish Gaelic has
            three and Irish has five! While there is no standard for dealing with this issue,
            Mozilla has developed a very practical approach to solving the problem, therefore we
            will adopt the same strategy here. Consult <link
              xlink:href="https://developer.mozilla.org/en/Localization_and_Plurals">Localization
              and Plurals</link> to determine your language's plural rule number.<footnote>
              <para>Most Western languages use plural rule #1. French uses either rule #1 or rule
                #2, depending on the region.</para>
            </footnote>. Once you have determined the plural rule number to use, set the number as
            the value of the <code>knitml.pattern-renderer.plural-rule</code> property at the top of
            the file. </para>
          <para>Each entry in the <code>operations</code> file that ends with <code>.$$$</code>
            indicates that the value should be pluralized. Each plural form is specified between
            semi-colons. To write your language's plural forms, you can either write the phrase in a
            way which does not require a specialized form for the instance of the number, or you can
            write it in a way which requires explicit pluralized forms. In the case of the former,
            you only need to specify one value and that form will be used regardless of the plural
            form of the number. In the case of the latter, the first form occurs before the first
            semi-colon, the second form immediately after the first colon, the third form
            immediately after the second colon, etc.</para>
          <para>For example, to localize the <code>operation.stitch.word</code> property, in English
            I could set the value either to <code>stitches: {0}</code> (no specific plural form) or
              <code>{0} stitch;{0} stitches</code> (plural form specific to the number).</para>
          <para>It gets a bit trickier when there are two plural forms in the same phrase. Take the
              <code>operation.cross-stitches.front</code> property, for instance. The phrase looks
            something like "cross next X stitches over Y stitches." Because the pluralization for
            each number can vary, there are four different plural forms of this phrase in English
            (nine in Scottish Gaelic, twenty-five in Irish). Since each number specifies an
            individual plural form, the entry in the property file is broken into two property
            names: <code>operation.cross-stitches.front.$$0</code> (tied to the pluralization of the
            first parameter) and <code>operation.cross-stitches.front.$$1</code> (tied to the
            pluralization of the second parameter). In the property file, it looks like this:</para>
          <para>
            <programlisting>...front.$$0=cross next stitch;cross next {0} stitches
...front.$$1= over {1} stitch; over {1} stitches</programlisting>
          </para>
          <para>The renderer concatenates both values together, using the <code>$$0</code> entry,
            then the <code>$$1</code> entry. If you want to specify a different order of
            concatenation, you can do that with a <code>$$order</code> parameter as follows:</para>
          <para>
            <programlisting>...front.$$0= cross next stitch; cross next {0} stitches
...front.$$1=Over {1} stitch,;Over {1} stitches,
...front.$$order=10</programlisting>
          </para>
          <para>This specifies that the <code>$$1</code> entry renders first, then the
            <code>$$0</code>, so it will render something like <code>Over 1 stitch, cross next 2
              stitches</code>.</para>
          <para>A <code>$$order</code> value of <code>01</code> in this case is the same as the
            default behavior (which is what happens if you do not provide the property).</para>
        </sect2>
      </sect1>
    </chapter>
    <chapter>
      <title>Integrating with APIs</title>
      <para>This chapter will discuss writing your own software to integrate with KnitML's public
        APIs. This chapter will primarily be intended for programmers wishing to integrate their own
        knitting application with KnitML interfaces. A separate programmer's guide may be written
        instead.</para>
    </chapter>
  </part>
  <appendix>
    <title>The Specification</title>
    <para>This section will detail the KnitML specification. For now, behavior is described fairly
      accurately in the <link xlink:href="schema/pattern-0.4.xsd.html">XML Schema</link>.</para>
  </appendix>
  <appendix role="landscape">
    <title>Knitting Expression Language Reference</title>
    <para>
      <table xml:id="el-function-table" frame="all" pgwide="1">
        <title>Defined Expression Language Functions</title>
        <tgroup cols="5" align="left">
          <colspec colname="Function" colnum="1" colwidth="1*"/>
          <colspec colname="Parameters" colnum="2" colwidth="1*"/>
          <colspec colname="Description" colnum="3" colwidth="1*"/>
          <colspec colname="Example" colnum="4" colwidth="1.25*"/>
          <colspec colname="XML Equivalent" colnum="5" colwidth="1.5*"/>
          <thead>
            <row>
              <entry>Function</entry>
              <entry>Parameters</entry>
              <entry>Description</entry>
              <entry>Example</entry>
              <entry>XML Equivalent</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>applyNextRow</entry>
              <entry>ref as <link xlink:href="#idref-type">IDREF</link>
              </entry>
              <entry>Use the next row for the given block instruction</entry>
              <entry>
                <code>applyNextRow 'my'</code>
              </entry>
              <entry>
                <code>&lt;apply-next-row instruction-ref="my"/></code>
              </entry>
            </row>
            <row>
              <entry>arrangeStitches</entry>
              <entry>needleSpec as <link xlink:href="#map-entry-type">MapEntry</link><link
                  xlink:href="#dot-notation-explanation">...</link>
              </entry>
              <entry>Arrange the stitches on the needles as specified, starting with the working
                stitch.</entry>
              <entry>
                <code>arrangeStitches 'n1':10 'n2':12</code>
              </entry>
              <entry>
                <programlisting>&lt;arrange-stitches-on-needles>
  &lt;needle ref="n1">10&lt;/needle>
  &lt;needle ref="n2">12&lt;/needle>
&lt;/arrange-stitches-on-needles></programlisting>
              </entry>
            </row>
            <row>
              <entry>ballWeight</entry>
              <entry>number as <link xlink:href="#decimal-type">Decimal</link>, weight as <link
                  xlink:href="#weight-unit-type">WeightUnit</link>
              </entry>
              <entry>The weight of a single ball of yarn. The colon is optional.</entry>
              <entry>
                <code>ballWeight: 50 g</code>
              </entry>
              <entry>
                <programlisting>&lt;ball-weight unit="g">50
&lt;/ball-weight></programlisting>
              </entry>
            </row>
            <row>
              <entry morerows="1">bindOff</entry>
              <entry morerows="1">
                <para>
                  <emphasis>(allStitches|all)</emphasis> or number as <link
                    xlink:href="#integer-type">Integer</link>, stitches as <link
                    xlink:href="#stitch-type">Stitch</link> (optional), <emphasis>with</emphasis>
                  (optional), yarnRef as <link xlink:href="#idref-type">IDREF</link> (optional),
                  wise as <link xlink:href="#wise-type">Wise</link> (optional)</para>
              </entry>
              <entry morerows="1">Bind off either all of the stitches in the row / on the needle, or
                the specified number. Use the specified yarn and wise, if provided.</entry>
              <entry>
                <code>bindOff 10 sts with 'y1' purlwise</code>
              </entry>
              <entry>
                <programlisting>&lt;bind-off yarn-ref="y1"
          type="purlwise">10
&lt;/bind-off></programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <code>bindOff all sts knitwise</code>
              </entry>
              <entry>
                <programlisting>&lt;bind-off-all type="knitwise"/></programlisting>
              </entry>
            </row>
            <row>
              <entry>bo / BO</entry>
              <entry>(same as bindOff)</entry>
              <entry>alias for bindOff</entry>
              <entry><code>bo 20</code></entry>
              <entry>
                <programlisting>&lt;bind-off>
20&lt;/bind-off></programlisting>
              </entry>
            </row>
            <row>
              <entry morerows="1">castOn</entry>
              <entry morerows="1">number as <link xlink:href="#integer-type">Integer</link>, style
                as <link xlink:href="#string-type">String</link>, <emphasis>countAsRow</emphasis>,
                stitches as <link xlink:href="#stitch-type">Stitch</link> xmlAttributes as <link
                  xlink:href="#map-type">Map</link> (all parameters optional in any order)</entry>
              <entry morerows="1">Cast the number of stitches onto the current needle. If
                  <emphasis>countAsRow</emphasis> is specified, the cast on will be treated as a row
                (e.g. if it's the first row in a flat pattern, the next row in the pattern will be
                the wrong side).</entry>
              <entry>
                <code>castOn 35 sts</code>
              </entry>
              <entry>
                <code>&lt;cast-on>35&lt;/cast-on></code>
              </entry>
            </row>
            <row>
              <entry><code>castOn 35 countAsRow</code></entry>
              <entry>
                <programlisting>&lt;cast-on
  count-as-row="false">
35&lt;/cast-on></programlisting>
              </entry>
            </row>
            <row>
              <entry>cdd</entry>
              <entry>number as <link xlink:href="#integer-type">Integer</link></entry>
              <entry>Center double decrease</entry>
              <entry>
                <code>cdd 2</code>
              </entry>
              <entry>
                <code>&lt;double-decrease type="cdd">2&lt;/double-decrease></code>
              </entry>
            </row>
            <row>
              <entry>co / CO</entry>
              <entry>(same as castOn)</entry>
              <entry>alias for castOn</entry>
              <entry>
                <code>co 35</code>
              </entry>
              <entry>
                <code>&lt;cast-on>35&lt;/cast-on></code>
              </entry>
            </row>
            <row>
              <entry>color</entry>
              <entry>
                <para>name as <link xlink:href="#string-type">String</link>, xmlAttributes as <link
                    xlink:href="#map-type">Map</link>
                </para>
                <para>(all parameters optional)</para>
              </entry>
              <entry>The color of the yarn.</entry>
              <entry>
                <code>color 'yellow' [number:127]</code>
              </entry>
              <entry>
                <code>&lt;color name="yellow" number="127"/></code>
              </entry>
            </row>
            <row>
              <entry>copyrightInfo</entry>
              <entry>(none)</entry>
              <entry>Copyright information about this pattern. Not currently defined.</entry>
              <entry>
                <code>copyrightInfo {...}</code>
              </entry>
              <entry>
                <code>&lt;copyright-info> ... &lt;/copyright-info></code>
              </entry>
            </row>
            <row>
              <entry morerows="1">cross</entry>
              <entry morerows="1">first as <link xlink:href="#integer-type">Integer</link>,
                crossSpec as <link xlink:href="#cross-type">Cross</link>, next as <link
                  xlink:href="#integer-type">Integer</link>
              </entry>
              <entry morerows="1">Cross number of stitches specified by 'first' with number of
                stitches specified by 'next' using the crossSpec</entry>
              <entry>
                <code>cross 2 inFrontOf 2</code>
              </entry>
              <entry>
                <code>&lt;cross-stitches first="2" next"2" type="front" /></code>
              </entry>
            </row>
            <row>
              <entry>
                <code>cross 2 behind 2</code>
              </entry>
              <entry>
                <code>&lt;cross-stitches first="2" next"2" type="back" /></code>
              </entry>
            </row>
            <row>
              <entry>crossStitches</entry>
              <entry>(same as cross)</entry>
              <entry>alias for cross</entry>
              <entry>
                <code>crossStitches 2 behind 2</code>
              </entry>
              <entry>
                <code>&lt;cross-stitches first="2" next"2" type="back" /></code>
              </entry>
            </row>
            <row>
              <entry>declareFlatKnitting</entry>
              <entry>
                <emphasis>with</emphasis>, side as <link xlink:href="#side-type">Side</link>,
                  <emphasis>next</emphasis> (all parameters optional except side)</entry>
              <entry>Start knitting flat. The next row facing is specified by the side parameter.</entry>
              <entry>
                <code>declareFlatKnitting with rightSide next</code>
              </entry>
              <entry>
                <programlisting>&lt;declare-flat-knitting
  next-row-side="right"/></programlisting>
              </entry>
            </row>
            <row>
              <entry>declareRoundKnitting</entry>
              <entry>(none)</entry>
              <entry>Start knitting in the round.</entry>
              <entry>
                <code>declareRoundKnitting</code>
              </entry>
              <entry>
                <code>&lt;declare-round-knitting/></code>
              </entry>
            </row>
            <row>
              <entry>designateEndOfRow</entry>
              <entry>(none)</entry>
              <entry>Signal that the last stitch worked is now the last stitch in the row.</entry>
              <entry>
                <code>designateEndOfRow</code>
              </entry>
              <entry>
                <programlisting>&lt;designate-end-of-row/></programlisting>
              </entry>
            </row>
            <row>
              <entry>directions</entry>
              <entry>(none)</entry>
              <entry>The pattern directions</entry>
              <entry>
                <code>directions {...}</code>
              </entry>
              <entry>
                <code>&lt;directions>...&lt;/directions></code>
              </entry>
            </row>
            <row>
              <entry>directives</entry>
              <entry>(none)</entry>
              <entry>The pattern directives </entry>
              <entry>
                <code>directives {...}</code>
              </entry>
              <entry>
                <code>&lt;directives>...&lt;/directives></code>
              </entry>
            </row>
            <row>
              <entry>firstName</entry>
              <entry>name as <link xlink:href="#string-type">String</link>
              </entry>
              <entry>The pattern designer's first name. Falls within the <code>author</code>
                element. The colon is optional.</entry>
              <entry>
                <code>firstName: 'Jonathan'</code>
              </entry>
              <entry>
                <programlisting>&lt;first-name>Jonathan&lt;/first-name></programlisting>
              </entry>
            </row>
            <row>
              <entry>forEachRowInInstruction</entry>
              <entry>ref as <link xlink:href="#idref-type">IDREF</link>
              </entry>
              <entry>Apply the contained operations for every row in a given block instruction</entry>
              <entry>
                <code>forEachRowInInstruction 'my' {...}</code>
              </entry>
              <entry>
                <code>&lt;for-each-row-in-instruction ref="my"> ...
                  &lt;/for-each-row-in-instruction></code>
              </entry>
            </row>
            <row>
              <entry>fromHolder</entry>
              <entry>ref as <link xlink:href="#idref-type">IDREF</link>
              </entry>
              <entry>Work the enclosed stitches from the specified stitch holder</entry>
              <entry>
                <programlisting>fromHolder 'sh1'{
  p2, k to end
}</programlisting>
              </entry>
              <entry>
                <programlisting>&lt;from-stitch-holder ref="sh1">
  &lt;purl>2&lt;/purl>
  &lt;repeat until="end">
    &lt;knit/>
  &lt;/repeat>
&lt;/from-stitch-holder></programlisting>
              </entry>
            </row>
            <row>
              <entry>gauge</entry>
              <entry>type as <link xlink:href="#string-type">String</link> (optional)</entry>
              <entry>A gauge element</entry>
              <entry>
                <code>gauge 'stockinette' {...}</code>
              </entry>
              <entry>
                <code>&lt;gauge type="stockinette"> ... &lt;/gauge></code>
              </entry>
            </row>
            <row>
              <entry>generalInformation</entry>
              <entry>languageCode as <link xlink:href="#string-type">String</link> (optional)</entry>
              <entry>The general information section written in the specified ISO language code</entry>
              <entry>
                <code>generalInformation 'en' {...}</code>
              </entry>
              <entry>
                <code>&lt;general-information xml:lang="en"> ... &lt;/general-information></code>
              </entry>
            </row>
            <row>
              <entry>graftTogether</entry>
              <entry>needles as <link xlink:href="#idref-type">IDREF</link><link
                  xlink:href="#dot-notation-explanation">...</link>
              </entry>
              <entry>Graft together all of the needles specified by the parameters</entry>
              <entry>
                <code>graftTogether 'n1' 'n2'</code>
              </entry>
              <entry>
                <programlisting>&lt;graft-together>
  &lt;needle ref="n1"/>
  &lt;needle ref="n2"/>
&lt;/graft-together></programlisting>
              </entry>
            </row>
            <row>
              <entry morerows="1">inform</entry>
              <entry morerows="1">stitchNumber as <link xlink:href="#integer-type">Integer</link>,
                stitches as <link xlink:href="#stitch-type">Stitch</link>, stateDescription as <link
                  xlink:href="#state-description-type">StateDescription</link> (optional) </entry>
              <entry morerows="1">Renders the number of stitches on the needles. Functionality may
                be expanded in the future.</entry>
              <entry>
                <code>inform 20 sts leftOnNeedles</code>
              </entry>
              <entry>
                <programlisting>&lt;information>
  &lt;number-of-stitches
    number="20"
    inform="true"/>
&lt;/information></programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <code>inform 20</code>
              </entry>
              <entry>
                <programlisting>&lt;information>
  &lt;number-of-stitches
    number="20"
    inform="true"/>
&lt;/information></programlisting>
              </entry>
            </row>
            <row>
              <entry>informationalMessage</entry>
              <entry>messageKey as <link xlink:href="#string-type">String</link>
              </entry>
              <entry>Provide textual information about the related part of the pattern</entry>
              <entry>
                <code>informationalMessage 'message.how-to-do-short-rows'</code>
              </entry>
              <entry>
                <code>&lt;information>&lt;message message-key = "message.how-to-do-short-rows"> ...
                  &lt;/message> &lt;/information></code>
              </entry>
            </row>
            <row>
              <entry>inlineInstruction</entry>
              <entry>
                <para>id as <link xlink:href="#id-type">ID</link>, <emphasis>withKey</emphasis>,
                    <emphasis>withLabel</emphasis>, label as <link xlink:href="#string-type"
                  >String</link>, xmlAttributes as <link xlink:href="#map-type">Map</link>
                </para>
                <para>(all parameters except id optional)</para>
              </entry>
              <entry>Define an inline instruction</entry>
              <entry>
                <code>inlineInstruction 'my' withKey withLabel 'Just do it' {...}</code>
              </entry>
              <entry>
                <code>&lt;inline-instruction id="my" message-key="inline-instruction.my" label="Just
                  do it"> ... &lt;/inline-instruction></code>
              </entry>
            </row>
            <row>
              <entry>inlineInstructionRef</entry>
              <entry>ref as <link xlink:href="#idref-type">IDREF</link>
              </entry>
              <entry>A reference to an inline instruction</entry>
              <entry>
                <code>inlineInstructionRef 'my'</code>
              </entry>
              <entry>
                <code>&lt;inline-instruction-ref ref="my"/></code>
              </entry>
            </row>
            <row>
              <entry>instruction</entry>
              <entry>
                <para>id as <link xlink:href="#id-type">ID</link>, <emphasis>withKey</emphasis>,
                    <emphasis>withLabel</emphasis>, label as <link xlink:href="#string-type"
                  >String</link>, shape as <link xlink:href="#shape-type">Shape</link>,
                  xmlAttributes as <link xlink:href="#map-type">Map</link>
                </para>
                <para>(all parameters except id optional)</para>
              </entry>
              <entry>Define a block instruction</entry>
              <entry>
                <code>instruction 'my' withKey withLabel 'Just do it' round {...}</code>
              </entry>
              <entry>
                <code>&lt;instruction id="my" message-key="instruction.my" label="Just do it"
                  shape="round"> ... &lt;/instruction></code>
              </entry>
            </row>
            <row>
              <entry>instructionDefinitions</entry>
              <entry>(none)</entry>
              <entry>Global instruction definitions defined in the header. Can be block
                instructions, inline instructions, or merged instructions. Will appear in the legend
                before the directions.</entry>
              <entry>
                <code>instructionDefinitions {...}</code>
              </entry>
              <entry>
                <code>&lt;instruction-definitions> ... &lt;/instruction-definitions></code>
              </entry>
            </row>
            <row>
              <entry>instructionGroup</entry>
              <entry>
                <para>id as <link xlink:href="#id-type">ID</link>, <emphasis>withKey</emphasis>,
                    <emphasis>withLabel</emphasis>, label as <link xlink:href="#string-type"
                  >String</link>, xmlAttributes as <link xlink:href="#map-type">Map</link>
                </para>
                <para>(all parameters except id optional)</para>
              </entry>
              <entry>Define a group of block operations</entry>
              <entry>
                <code>instructionGroup 'start' withKey withLabel 'Start Pattern' {...}</code>
              </entry>
              <entry>
                <code>&lt;instruction-group id="my" message-key="instruction-group.start"
                  label="Start Pattern"> ... &lt;/instruction-group></code>
              </entry>
            </row>
            <row>
              <entry>instructionRef</entry>
              <entry>ref as <link xlink:href="#idref-type">IDREF</link>
              </entry>
              <entry>A reference to a block instruction</entry>
              <entry>
                <code>instructionRef 'my'</code>
              </entry>
              <entry>
                <code>&lt;instruction-ref ref="my"/></code>
              </entry>
            </row>
            <row>
              <entry>joinInRound</entry>
              <entry>(none)</entry>
              <entry>Join active stitches in the round.</entry>
              <entry>
                <code>joinInRound</code>
              </entry>
              <entry>
                <programlisting>&lt;join-in-round/></programlisting>
              </entry>
            </row>
            <row>
              <entry morerows="4">k</entry>
              <entry morerows="4">
                <para>number as <link xlink:href="#integer-type">Integer</link>, yarnRef as <link
                    xlink:href="#idref-type">IDREF</link>, loopToWork as LoopToWork, repeatSpec as
                  Repeat, holderSpec as <link xlink:href="#holder-type">Holder</link></para>
                <para>(all parameters optional)</para>
              </entry>
              <entry morerows="4">Knit specified number of stitches</entry>
              <entry>
                <programlisting>k10
k 10</programlisting>
              </entry>
              <entry>
                <code>&lt;knit>10&lt;/knit></code>
              </entry>
            </row>
            <row>
              <entry>
                <programlisting>k to end
k end</programlisting>
              </entry>
              <entry>
                <programlisting>&lt;repeat until="end">
  &lt;knit/>
&lt;/repeat></programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <programlisting>k 3 'y1'
k3 'y1'
k 3 with 'y1'</programlisting>
              </entry>
              <entry>
                <code>&lt;knit yarn-ref="y1">3&lt;/knit></code>
              </entry>
            </row>
            <row>
              <entry>
                <programlisting>k to 2 sts before end
k to 2 before end
k 2 beforeEnd</programlisting>
              </entry>
              <entry>
                <programlisting>&lt;repeat until="before-end"
        value="2">
  &lt;knit/>
&lt;/repeat></programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <programlisting>k 3 tbl
k3 tbl</programlisting>
              </entry>
              <entry>
                <programlisting>&lt;knit loop-to-work="trailing">
3&lt;/knit></programlisting>
              </entry>
            </row>
            <row>
              <entry>k2tog</entry>
              <entry>(none)</entry>
              <entry>Knit next two stitches together</entry>
              <entry>
                <code>k2tog</code>
              </entry>
              <entry>
                <code>&lt;decrease type="k2tog"/></code>
              </entry>
            </row>
            <row>
              <entry>k3tog</entry>
              <entry>(none)</entry>
              <entry>Knit next three stitches together</entry>
              <entry>
                <code>k3tog</code>
              </entry>
              <entry>
                <code>&lt;double-decrease type="k3tog"/></code>
              </entry>
            </row>
            <row>
              <entry>kfb</entry>
              <entry>(none)</entry>
              <entry>Knit to the front and back of the next stitch.</entry>
              <entry>
                <code>kfb</code>
              </entry>
              <entry>
                <code>&lt;increase type="kfb"/></code>
              </entry>
            </row>
            <row>
              <entry>knit</entry>
              <entry>(same as k)</entry>
              <entry>alias for k</entry>
              <entry>
                <code>knit 10</code>
              </entry>
              <entry>
                <code>&lt;knit>10&lt;/knit></code>
              </entry>
            </row>
            <row>
              <entry morerows="1">labelNeedle</entry>
              <entry morerows="1">id as <link xlink:href="#id-type">ID</link>, with as <link
                  xlink:href="#with-type">With</link>, newLabel as <link xlink:href="#string-type"
                  >String</link>
              </entry>
              <entry morerows="1">labels a new needle with the newLabel parameter as either a
                message key (if keyword is 'withKey') or a literal value (if keyword is 'withLabel')</entry>
              <entry>
                <code>labelNeedle 'n1' withKey 'needle.new-label'</code>
              </entry>
              <entry>
                <code>&lt;label-needle ref="n1" message-key = "needle.new-label"/></code>
              </entry>
            </row>
            <row>
              <entry>
                <code>labelNeedle 'n1' withLabel 'Instep Needle'</code>
              </entry>
              <entry>
                <code>&lt;label-needle ref="n1" label = "Instep Needle"/></code>
              </entry>
            </row>
            <row>
              <entry>lastName</entry>
              <entry>name as <link xlink:href="#string-type">String</link>
              </entry>
              <entry>The pattern designer's last name. Falls within the <code>author</code> element.
                The colon is optional.</entry>
              <entry>
                <code>lastName: 'Whitall'</code>
              </entry>
              <entry>
                <programlisting>&lt;last-name>Whitall&lt;/last-name></programlisting>
              </entry>
            </row>
            <row>
              <entry>length</entry>
              <entry>number as <link xlink:href="#decimal-type">Decimal</link>, weight as <link
                  xlink:href="#length-unit-type">LengthUnit</link>
              </entry>
              <entry>The length of a needle. Usually only given for circular needles. The colon is
                optional.</entry>
              <entry>
                <code>length: 32 in</code>
              </entry>
              <entry>
                <programlisting>&lt;length unit="in">32
&lt;/length></programlisting>
              </entry>
            </row>
            <row>
              <entry>M1</entry>
              <entry>(none)</entry>
              <entry>Make 1. This does not specify a technique for increasing.</entry>
              <entry>
                <code>M1</code>
              </entry>
              <entry>
                <programlisting>&lt;increase/></programlisting>
              </entry>
            </row>
            <row>
              <entry>m1a</entry>
              <entry>(none)</entry>
              <entry>Make 1 away</entry>
              <entry>
                <code>m1a</code>
              </entry>
              <entry>
                <code>&lt;increase type="m1a"/></code>
              </entry>
            </row>
            <row>
              <entry>mergedInstruction</entry>
              <entry>
                <para>id as <link xlink:href="#id-type">ID</link>, <emphasis>withKey</emphasis>,
                    <emphasis>withLabel</emphasis>, label as <link xlink:href="#string-type"
                  >String</link>, xmlAttributes as <link xlink:href="#map-type">Map</link>
                </para>
                <para>(all parameters except id optional)</para>
              </entry>
              <entry>Merge two existing instructions together (see Nutkin2 for a better example)</entry>
              <entry>
                <code>mergedInstruction 'my' withKey withLabel 'Just do it' ['merge-point':'row',
                  type:'physical'] {...}</code>
              </entry>
              <entry>
                <code>&lt;merged-instruction id="my" message-key="merged-instruction.my" label="Just
                  do it" merge-point="row" type="physical"> ... &lt;/merged-instruction></code>
              </entry>
            </row>
            <row>
              <entry>messageSource</entry>
              <entry>source as <link xlink:href="#idref-type">IDREF</link>
              </entry>
              <entry>Use the specified ID as a localized message source for the pattern</entry>
              <entry>
                <code>messageSource 'msgs'</code>
              </entry>
              <entry>
                <programlisting>&lt;message-sources>
  &lt;message-source>msgs
  &lt;/message-source>
&lt;/message-sources></programlisting>
              </entry>
            </row>
            <row>
              <entry>messageSources</entry>
              <entry>sources as <link xlink:href="#idref-type">IDREF</link><link
                  xlink:href="#dot-notation-explanation">...</link>
              </entry>
              <entry>Use the specified IDs as internationalized message sources for the pattern.</entry>
              <entry>
                <code>messageSources 'header-msgs' 'body-msgs'</code>
              </entry>
              <entry>
                <programlisting>&lt;message-sources>
  &lt;message-source>header-msgs
  &lt;/message-source>
  &lt;message-source>body-msgs
  &lt;/message-source>
&lt;/message-sources></programlisting>
              </entry>
            </row>
            <row>
              <entry>needle</entry>
              <entry>
                <para>id as <link xlink:href="#id-type">ID</link>, <emphasis>withKey</emphasis>,
                    <emphasis>withLabel</emphasis>, label as <link xlink:href="#string-type"
                  >String</link>, xmlAttributes as <link xlink:href="#map-type">Map</link>
                </para>
                <para>(all parameters except id and typeref optional)</para>
              </entry>
              <entry>A needle used in the pattern.</entry>
              <entry>
                <code>needle 'needle1' withKey withLabel 'Needle 1' [typeref:'size1'] {...}</code>
              </entry>
              <entry>
                <code>&lt;needle id="needle1" message-key="needle.needle1" label="Needle 1"
                  typeref="size1"> ... &lt;/needle></code>
              </entry>
            </row>
            <row>
              <entry>needleType</entry>
              <entry>id as <link xlink:href="#id-type">ID</link>, needleStyle as <link
                  xlink:href="#needle-type-type">NeedleType</link> (optional), xmlAttributes as
                  <link xlink:href="#map-type">Map</link> (optional)</entry>
              <entry>Define a type of needle for use in the pattern.</entry>
              <entry>
                <code>needleType 'size1' circ [brand:'Addi Turbo']</code>
              </entry>
              <entry>
                <code>&lt;needle-type id="size1" type="circular" brand="Addi Turbo"> ...
                  &lt;/needle-type></code>
              </entry>
            </row>
            <row>
              <entry>nextRound</entry>
              <entry>(same as row)</entry>
              <entry>call row() with supplied parameters, adding ['assign-row-number':false] and
                [type:'round'] to the xmlAttributes parameter</entry>
              <entry>
                <code>nextRound {...}</code>
              </entry>
              <entry>
                <programlisting>&lt;row assign-row-number="false"
     type="round">
...&lt;/row></programlisting>
              </entry>
            </row>
            <row>
              <entry>nextRow</entry>
              <entry>(same as row)</entry>
              <entry>call row() with supplied parameters, adding ['assign-row-number':false] to the
                xmlAttributes parameter</entry>
              <entry>
                <code>nextRow {...}</code>
              </entry>
              <entry>
                <programlisting>&lt;row assign-row-number="false">
...&lt;/row></programlisting>
              </entry>
            </row>
            <row>
              <entry>p</entry>
              <entry>
                <para>number as <link xlink:href="#integer-type">Integer</link>, yarnRef as <link
                    xlink:href="#idref-type">IDREF</link>, repeatSpec as <link
                    xlink:href="#repeat-type">Repeat</link>
                </para>
                <para>(all parameters optional)</para>
              </entry>
              <entry>Works the same as 'k' except that the XML element name is <code>purl</code>
              </entry>
              <entry>
                <code>p to end</code>
              </entry>
              <entry>
                <programlisting>&lt;repeat until="end">
  &lt;purl/>
&lt;/repeat></programlisting>
              </entry>
            </row>
            <row>
              <entry>p2tog</entry>
              <entry>number as <link xlink:href="#integer-type">Integer</link> (optional)</entry>
              <entry>Purl next two stitches together</entry>
              <entry>
                <code>p2tog</code>
              </entry>
              <entry>
                <code>&lt;decrease type="p2tog"/></code>
              </entry>
            </row>
            <row>
              <entry>p3tog</entry>
              <entry>number as <link xlink:href="#integer-type">Integer</link> (optional)</entry>
              <entry>Purl next three stitches together</entry>
              <entry>
                <code>p3tog</code>
              </entry>
              <entry>
                <code>&lt;double-decrease type="p3tog"/></code>
              </entry>
            </row>
            <row>
              <entry>pattern</entry>
              <entry>languageCode as <link xlink:href="#string-type">String</link> (optional)</entry>
              <entry>The pattern written in the specified ISO language code</entry>
              <entry>
                <code>pattern 'en' {...}</code>
              </entry>
              <entry>
                <code>&lt;pattern xml:lang="en"> ... &lt;/pattern></code>
              </entry>
            </row>
            <row>
              <entry morerows="1">pickUp</entry>
              <entry morerows="1">
                <para>number as <link xlink:href="#integer-type">Integer</link>, stitches as <link
                    xlink:href="#stitch-type">Stitch</link>, yarnRef as <link
                    xlink:href="#idref-type">IDREF</link>, wise as <link xlink:href="#wise-type"
                    >Wise</link>
                </para>
                <para>(all parameters except number optional)</para>
              </entry>
              <entry morerows="1">Pick up the specified number of stitches. If wise is not
                specified, defaults to knitwise. Renders as <code>inline-pickup-stitches</code> if
                within a row.</entry>
              <entry>
                <code>pickUp 10 sts 'y1' purlwise</code>
              </entry>
              <entry>
                <programlisting>&lt;pick-up-stitches type="purlwise"
                  yarn-ref="y1">
10&lt;/pick-up-stitches>
  </programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <code>pickUp 20</code>
              </entry>
              <entry>
                <programlisting>&lt;pick-up-stitches>
20&lt;/pick-up-stitches></programlisting>
              </entry>
            </row>
            <row>
              <entry>placeMarker</entry>
              <entry>(same as pm)</entry>
              <entry>alias for pm</entry>
              <entry>
                <code>placeMarker</code>
              </entry>
              <entry>
                <code>&lt;place-marker/></code>
              </entry>
            </row>
            <row>
              <entry>pm</entry>
              <entry>(none)</entry>
              <entry>Place a marker at the working place in the pattern.</entry>
              <entry>
                <code>pm</code>
              </entry>
              <entry>
                <code>&lt;place-marker/></code>
              </entry>
            </row>
            <row>
              <entry>purl</entry>
              <entry>(same as p)</entry>
              <entry>alias for p</entry>
              <entry>
                <code>purl 10</code>
              </entry>
              <entry>
                <code>&lt;purl>10&lt;/purl></code>
              </entry>
            </row>
            <row>
              <entry>ref</entry>
              <entry>ref as <link xlink:href="#idref-type">IDREF</link>
              </entry>
              <entry>alias for inlineInstructionRef</entry>
              <entry>
                <code>ref 'my'</code>
              </entry>
              <entry>
                <code>&lt;inline-instruction-ref ref="my"/></code>
              </entry>
            </row>
            <row>
              <entry>removeMarker</entry>
              <entry>(none)</entry>
              <entry>Remove the marker at the working place in the pattern.</entry>
              <entry>
                <code>removeMarker</code>
              </entry>
              <entry>
                <code>&lt;remove-marker/></code>
              </entry>
            </row>
            <row>
              <entry>repeat</entry>
              <entry>repeatSpec as <link xlink:href="#repeat-type">Repeat</link>, xmlAttributes as
                  <link xlink:href="#map-type">Map</link>
              </entry>
              <entry>Repeat the enclosed inline instructions as many times as specified</entry>
              <entry>
                <code>repeat 3 times {...}</code>
              </entry>
              <entry>
                <programlisting>&lt;repeat until="times"
        value="3"> ...
&lt;/repeat></programlisting>
              </entry>
            </row>
            <row>
              <entry morerows="2">repeatInstruction / repeat</entry>
              <entry morerows="2">ref as <link xlink:href="#idref-type">IDREF</link>, repeatSpec as
                  <link xlink:href="#repeat-inst-type">RepeatInst</link>, xmlAttributes as <link
                  xlink:href="#map-type">Map</link>
              </entry>
              <entry morerows="2">Repeat the referenced instruction as many times as specified</entry>
              <entry>
                <code>repeat 'inst1' until 20 sts remain</code>
              </entry>
              <entry>
                <programlisting>&lt;repeat-instruction ref="inst1">
  &lt;until-stitches-remain>20
  &lt;/until-stitches-remain>
&lt;/repeat-instruction></programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <code>repeat 'inst1' until measures 4 in</code>
              </entry>
              <entry>
                <programlisting>&lt;repeat-instruction ref="inst1">
  &lt;until-measures unit="in">4
  &lt;/until-measures>
&lt;/repeat-instruction></programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <code>repeat 'inst1' 8 additionalTimes</code>
              </entry>
              <entry>
                <programlisting>&lt;repeat-instruction ref="inst1">
  &lt;additional-times>8
  &lt;/additional-times>
&lt;/repeat-instruction></programlisting>
              </entry>
            </row>
            <row>
              <entry>round</entry>
              <entry>(same as row)</entry>
              <entry>call row() with supplied parameters, adding [type:'round'] to the xmlAttributes
                parameter</entry>
              <entry>
                <code>round {...}</code>
              </entry>
              <entry>
                <code>&lt;row type="round">...&lt;/row></code>
              </entry>
            </row>
            <row>
              <entry morerows="4">row</entry>
              <entry morerows="4">
                <para>yarnRef as <link xlink:href="#idref-type">IDREF</link>, number as <link
                    xlink:href="#integer-type">Integer</link>, numbers as List&lt;Integer>,
                    <emphasis>informSide</emphasis>, <emphasis>doNotAssignNumber</emphasis>,
                  xmlAttributes as <link xlink:href="#map-type">Map</link>
                </para>
                <para>(all parameters optional)</para>
              </entry>
              <entry morerows="4">A row in the pattern</entry>
              <entry>
                <code>row 'y1' 1 {...}</code>
              </entry>
              <entry>
                <code>&lt;row yarn-ref="y1" number="1">...&lt;/row></code>
              </entry>
            </row>
            <row>
              <entry>
                <code>row [1,3,5] {...}</code>
              </entry>
              <entry>
                <code>&lt;row number="1 3 5">...&lt;/row></code>
              </entry>
            </row>
            <row>
              <entry>
                <code>row doNotAssignNumber {...}</code>
              </entry>
              <entry>
                <code>&lt;row assign-row-number="false">...&lt;/row></code>
              </entry>
            </row>
            <row>
              <entry>
                <code>row informSide {...}</code>
              </entry>
              <entry>
                <code>&lt;row inform-side="true">...&lt;/row></code>
              </entry>
            </row>
            <row>
              <entry>
                <code>row [type:'flat', resetRowCount:true] {...}</code>
              </entry>
              <entry>
                <code>&lt;row type="flat" reset-row-count="true">...&lt;/row></code>
              </entry>
            </row>
            <row>
              <entry>rowGauge</entry>
              <entry>number as <link xlink:href="#decimal-type">Decimal</link>, gauge as <link
                  xlink:href="#row-gauge-unit-type">RowGaugeUnit</link>
              </entry>
              <entry>The number of rows (vertically) per unit of measurement. The colon is optional.</entry>
              <entry>
                <code>rowGauge: 3.5 rowsPerInch</code>
              </entry>
              <entry>
                <programlisting>&lt;row-gauge unit="row/in">3.5
                  &lt;/row-gauge></programlisting>
              </entry>
            </row>
            <row>
              <entry>s2kp</entry>
              <entry>(same as cdd)</entry>
              <entry>Center double decrease</entry>
              <entry>
                <code>s2kp</code>
              </entry>
              <entry>
                <code>&lt;double-decrease type="cdd"/></code>
              </entry>
            </row>
            <row>
              <entry>section</entry>
              <entry>
                <emphasis>resetRowCount</emphasis> (optional)</entry>
              <entry>A logical grouping of operations in a pattern. Can be interpreted as a
                paragraph. The resetRowCount parameter sets the next row back to row 1.</entry>
              <entry>
                <code>section resetRowCount {...}</code>
              </entry>
              <entry>
                <code>&lt;section reset-row-count="true"> ... &lt;/section></code>
              </entry>
            </row>
            <row>
              <entry>shortRow</entry>
              <entry>(same as row)</entry>
              <entry>call row() with supplied parameters, adding <code>[short:true]</code> to the
                xmlAttributes parameter</entry>
              <entry>
                <code>shortRow 1 {...}</code>
              </entry>
              <entry>
                <code>&lt;row short="true" number="1">...&lt;/row></code>
              </entry>
            </row>
            <row>
              <entry morerows="1">size</entry>
              <entry morerows="1">number as <link xlink:href="#decimal-type">Decimal</link> or <link
                  xlink:href="#string-type">String</link>, size as <link
                  xlink:href="#needle-size-type">NeedleSize</link>
              </entry>
              <entry morerows="1">The size (i.e. thickness) of the needle.</entry>
              <entry>
                <code>size 3.0 mm</code>
              </entry>
              <entry>
                <programlisting>&lt;size unit="mm">3.0
&lt;/size></programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <code>size '00' US</code>
              </entry>
              <entry>
                <programlisting>&lt;size unit="US">00
&lt;/size></programlisting>
              </entry>
            </row>
            <row>
              <entry morerows="4">sl</entry>
              <entry morerows="4">
                <para><emphasis>next</emphasis>, number as <link xlink:href="#integer-type"
                  >Integer</link>, stitches as <link xlink:href="#stitch-type">Stitch</link>, wise
                  as <link xlink:href="#wise-type">Wise</link>, <emphasis>reverse |
                  inReverse</emphasis>, position as <link xlink:href="#yarn-position-type"
                    >YarnPosition</link>, xmlAttributes as <link xlink:href="#map-type">Map</link></para>
                <para>(all parameters optional)</para>
              </entry>
              <entry morerows="4">Slip the specified number of stitches</entry>
              <entry>
                <code>sl 5</code>
              </entry>
              <entry>
                <code>&lt;slip>5&lt;/slip></code>
              </entry>
            </row>
            <row>
              <entry><code>sl 5 sts knitwise</code></entry>
              <entry>
                <programlisting>&lt;slip type="knitwise">5
&lt;/slip></programlisting>
              </entry>
            </row>
            <row>
              <entry><code>sl next 5 sts to holder 'h1'</code></entry>
              <entry>
                <programlisting>&lt;slip-to-stitch-holder ref="h1">5
&lt;/slip-to-stitch-holder></programlisting>
              </entry>
            </row>
            <row>
              <entry><code>sl 5 inReverse</code></entry>
              <entry>
                <programlisting>&lt;slip direction="reverse">5
&lt;/slip></programlisting>
              </entry>
            </row>
            <row>
              <entry><code>sl 5 wyib</code></entry>
              <entry>
                <programlisting>&lt;slip yarn-position="back">5
&lt;/slip></programlisting>
              </entry>
            </row>
            <row>
              <entry>ssk</entry>
              <entry>(none)</entry>
              <entry>Slip-slip-knit</entry>
              <entry>
                <code>ssk</code>
              </entry>
              <entry>
                <code>&lt;decrease type="ssk"/></code>
              </entry>
            </row>
            <row>
              <entry>sssk</entry>
              <entry>(none)</entry>
              <entry>Slip-slip-slip-knit</entry>
              <entry>
                <code>sssk</code>
              </entry>
              <entry>
                <code>&lt;double-decrease type="sssk"/></code>
              </entry>
            </row>
            <row>
              <entry morerows="3">state</entry>
              <entry morerows="3">stitchNumber as <link xlink:href="#integer-type">Integer</link>,
                stitches as <link xlink:href="#stitch-type">Stitch</link>, stateDescription as <link
                  xlink:href="#state-description-type">StateDescription...</link> (all parameters
                optional in any order) </entry>
              <entry morerows="3">State the number of stitches left in the row, or state the number
                of stitches which have yet to be worked for this row. If a number is specified, the
                validator asserts that this number matches reality. Can be used at the end of a row
                definition, in which case the element name will be
                <code>&lt;followup-information></code> instead of <code>&lt;information></code>.</entry>
              <entry>
                <programlisting>state 10 sts rem
state 10 sts remain
state 10 sts remaining
state 10 sts left
state 10 sts inRow
state 10 sts onNeedles
state 10 sts left onNeedles
state 10 sts</programlisting>
              </entry>
              <entry>
                <programlisting>&lt;information>
  &lt;number-of-stitches
     number="10"/>
&lt;/information></programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <programlisting>state sts rem
state rem sts
state remaining sts
state sts</programlisting>
              </entry>
              <entry>
                <programlisting>&lt;information>
  &lt;number-of-stitches/>
&lt;/information></programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <programlisting>state 10 unworked sts
state 10 sts unworked
state 10 unworked</programlisting>
              </entry>
              <entry>
                <programlisting>&lt;information>
  &lt;number-of-unworked-stitches
     number="10"/>
&lt;/information></programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <programlisting>state unworked sts
state sts unworked
state unworked</programlisting>
              </entry>
              <entry>
                <programlisting>&lt;information>
  &lt;number-of-unworked-stitches/>
&lt;/information></programlisting>
              </entry>
            </row>
            <row>
              <entry>stitchGauge</entry>
              <entry>number as <link xlink:href="#decimal-type">Decimal</link>, gauge as <link
                  xlink:href="#stitch-gauge-unit-type">StitchGaugeUnit</link>
              </entry>
              <entry>The number of stitches (horizontally) per unit of measurement. The colon is
                optional.</entry>
              <entry>
                <code>stitchGauge: 3.5 stitchesPerInch</code>
              </entry>
              <entry>
                <programlisting>&lt;stitch-gauge unit="st/in">3.5
&lt;/stitch-gauge></programlisting>
              </entry>
            </row>
            <row>
              <entry morerows="1">stitchHolder</entry>
              <entry morerows="1">
                <para>id as <link xlink:href="#id-type">ID</link>, <emphasis>withKey</emphasis>,
                    <emphasis>withLabel</emphasis>, label as <link xlink:href="#string-type"
                  >String</link></para>
                <para>(all parameters except id optional)</para>
              </entry>
              <entry morerows="1">A stitch holder used in the pattern.</entry>
              <entry>
                <code>stitchHolder 'sh1'</code>
              </entry>
              <entry>
                <programlisting>&lt;stitch-holder id="sh1"/></programlisting>
              </entry>
            </row>
            <row>
              <entry><code>stitchHolder 'sh1' withKey withLabel "Stitch Holder 1"</code></entry>
              <entry>
                <programlisting>&lt;stitch-holder id="sh1"
  message-key="stitch-holder.sh1"
  label="Stitch Holder 1"/></programlisting>
              </entry>
            </row>
            <row>
              <entry>thickness</entry>
              <entry>number as <link xlink:href="#decimal-type">Decimal</link>, thickness as <link
                  xlink:href="#thickness-unit-type">ThicknessUnit</link>
              </entry>
              <entry>The thickness of the yarn (wraps per unit of measurement). The colon is
                optional.</entry>
              <entry>
                <code>thickness: 16 wrapsPerInch</code>
              </entry>
              <entry>
                <programlisting>&lt;thickness unit="wrap/in">
16&lt;/thickness></programlisting>
              </entry>
            </row>
            <row>
              <entry>totalLength</entry>
              <entry>number as <link xlink:href="#decimal-type">Decimal</link>, weight as <link
                  xlink:href="#length-unit-type">LengthUnit</link>
              </entry>
              <entry>The length of yarn required to complete the project. The colon is optional.</entry>
              <entry>
                <code>totalLength: 500 yd</code>
              </entry>
              <entry>
                <programlisting>&lt;total-length unit="g">50
&lt;/total-length></programlisting>
              </entry>
            </row>
            <row>
              <entry>totalWeight</entry>
              <entry>number as <link xlink:href="#decimal-type">Decimal</link>, weight as <link
                  xlink:href="#weight-unit-type">WeightUnit</link>
              </entry>
              <entry>The weight of yarn required to complete the project. The colon is optional.</entry>
              <entry>
                <code>totalWeight: 50 g</code>
              </entry>
              <entry>
                <programlisting>&lt;total-weight unit="g">50
&lt;/total-weight></programlisting>
              </entry>
            </row>
            <row>
              <entry>useNeedle</entry>
              <entry>
                <emphasis>quietly</emphasis> (optional), needle as <link xlink:href="#idref-type"
                  >IDREF</link>
              </entry>
              <entry>Use the specified needle for knitting. "Quietly" indicates that this is a
                directive for the computer, not something that should be rendererd in a pattern.</entry>
              <entry>
                <code>useNeedle 'n1' quietly</code>
              </entry>
              <entry>
                <programlisting>&lt;use-needles silent="true">
  &lt;needle ref="n1"/>
&lt;/use-needles></programlisting>
              </entry>
            </row>
            <row>
              <entry>useNeedles</entry>
              <entry>
                <emphasis>quietly</emphasis> (optional), needles as <link xlink:href="#idref-type"
                  >IDREF</link><link xlink:href="#dot-notation-explanation">...</link>
              </entry>
              <entry>Use the specified needles for knitting.</entry>
              <entry>
                <code>useNeedles 'n1' 'n2'</code>
              </entry>
              <entry>
                <programlisting>&lt;use-needles silent="true">
  &lt;needle ref="n1"/>
  &lt;needle ref="n2"/>
&lt;/use-needles></programlisting>
              </entry>
            </row>
            <row>
              <entry>usingNeedle</entry>
              <entry>ref as <link xlink:href="#idref-type">IDREF</link>
              </entry>
              <entry>Using the specified needle, perform child operations</entry>
              <entry>
                <code>usingNeedle 'needle1' {...}</code>
              </entry>
              <entry>
                <code>&lt;using-needle ref="needle1"> ... &lt;/using-needle></code>
              </entry>
            </row>
            <row>
              <entry morerows="1">work</entry>
              <entry morerows="1">
                <para><emphasis>even</emphasis>, <emphasis role="italic">for</emphasis>, number as
                    <link xlink:href="#integer-type">Integer</link>, stitches as <link
                    xlink:href="#stitch-type">Stitch</link>, <emphasis>with</emphasis>, yarnRef as
                    <link xlink:href="#idref-type">IDREF</link>, repeatSpec as <link
                    xlink:href="#repeat-type">Repeat</link></para>
                <para>(all parameters optional)</para>
              </entry>
              <entry morerows="1">Knit stitches which had been knit in the previous row, and purl
                stitches which had been purled in the previous row. This instruction does not
                increase or decrease.</entry>
              <entry>
                <code>work even for 5 sts</code>
              </entry>
              <entry>
                <code>&lt;using-needle ref="needle1"> ... &lt;/using-needle></code>
              </entry>
            </row>
            <row>
              <entry><code>work to end</code></entry>
              <entry>
                <programlisting>&lt;repeat until="end">
  &lt;work-even/>
&lt;/repeat></programlisting>
              </entry>
            </row>
            <row>
              <entry>yarn</entry>
              <entry>
                <para>id as <link xlink:href="#id-type">ID</link>, <emphasis>withKey</emphasis>,
                    <emphasis>withLabel</emphasis>, label as <link xlink:href="#string-type"
                  >String</link>, xmlAttributes as <link xlink:href="#map-type">Map</link>
                </para>
                <para>(all parameters except id optional)</para>
              </entry>
              <entry>A yarn used in the pattern. The xmlAttributes parameter must have a typeref
                attribute referring to a previously declared yarnType.</entry>
              <entry>
                <code>yarn 'y1' withKey withLabel 'Main Color' [symbol:'MC', typeref:'wool']
                {...}</code>
              </entry>
              <entry>
                <code>&lt;yarn id="y1" message-key="yarn.MC" label="Main Color" symbol="MC"
                  typeref="wool"> ... &lt;/yarn></code>
              </entry>
            </row>
            <row>
              <entry>yarnType</entry>
              <entry>id as <link xlink:href="#id-type">ID</link>, xmlAttributes as <link
                  xlink:href="#map-type">Map</link>
              </entry>
              <entry>Define a type of yarn for use in the pattern.</entry>
              <entry>
                <code>yarnType 'wool' [brand:'Lorna\'s Laces', weight:'fingering'] {...}</code>
              </entry>
              <entry>
                <code>&lt;yarn-type id="wool" brand="Lorna's Laces"
                  weight="fingering"/>...&lt;/yarn-type></code>
              </entry>
            </row>
            <row>
              <entry>yo</entry>
              <entry>(none)</entry>
              <entry>Yarn over</entry>
              <entry>
                <code>yo</code>
              </entry>
              <entry>
                <code>&lt;increase type="yo"/></code>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
    <para xml:id="dot-notation-explanation">The ... notation indicates that there may be any number
      of individual parameters with this name and type.</para>
    <para>Whether or not the function is defined in <xref xlink:href="#el-function-table"/>, you can
      use the following syntax to define any XML element:</para>
    <para>
      <programlisting><emphasis>elementName</emphasis> [<emphasis>attr1</emphasis>:'<emphasis>attr1value</emphasis>',<emphasis>attr2</emphasis>:'<emphasis>attr2value</emphasis>'...] { <emphasis>body</emphasis> }</programlisting>
    </para>
    <para>When an element or attribute name has a hyphen in it (such as
      <code>instruction-group</code>), it must be in single quotes for the processor to interpret it
      correctly.</para>
    <para>The following table shows a few examples of custom functions:</para>
    <para>
      <table xml:id="custom-function-example-table" frame="all">
        <title>Custom Function Examples</title>
        <tgroup cols="2">
          <colspec colname="c1" colnum="1"/>
          <colspec colname="c2" colnum="2"/>
          <thead>
            <row>
              <entry>KnittingEL</entry>
              <entry>XML</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <programlisting>author {
  'first-name' Jonathan
  'last-name' Whitall
}</programlisting>
              </entry>
              <entry>
                <programlisting>&lt;author>
  &lt;first-name>Jonathan&lt;/first-name>
  &lt;last-name>Whitall&lt;/last-name>
&lt;/author></programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <programlisting>instruction [id:'my','message-key':'instruction.my'] {
   k1, p1
}</programlisting>
              </entry>
              <entry>
                <programlisting>&lt;instruction id="my"
             message-key="instruction.my">
  &lt;knit>1&lt;/knit>
  &lt;purl>1&lt;/purl>
&lt;/instruction>                </programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <programlisting>increase [type:'moss']</programlisting>
              </entry>
              <entry>
                <programlisting>&lt;increase type="moss"/></programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <programlisting>slip5</programlisting>
              </entry>
              <entry>
                <programlisting>&lt;slip>5&lt;/slip></programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <programlisting>'slip5'</programlisting>
                <para>(not valid KnitML)</para>
              </entry>
              <entry>
                <programlisting>&lt;slip5/></programlisting>
              </entry>
            </row>
            <row>
              <entry>
                <programlisting>tree [age:'150',size:'big'] {
  name: 'Old Faithful'
}</programlisting>
                <para>(not valid KnitML)</para>
              </entry>
              <entry>
                <programlisting>&lt;tree age="150" size="big">
  &lt;name>Old Faithful&lt;/name>
&lt;/tree></programlisting>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
    <para>Use the pre-defined functions whenever possible, but there may be times when you need
      maximum flexibility to express the resulting XML.</para>
    <para>
      <table frame="all">
        <title>Expression Language Data Types</title>
        <tgroup cols="3">
          <colspec colname="c1" colnum="1"/>
          <colspec colname="c2" colnum="2"/>
          <colspec colname="newCol3" colnum="3"/>
          <thead>
            <row>
              <entry>Type</entry>
              <entry>Form</entry>
              <entry>Example</entry>
            </row>
          </thead>
          <tbody>
            <row xml:id="cross-type">
              <entry>Cross</entry>
              <entry>
                <code>('inFrontOf' | 'behind')</code>
              </entry>
              <entry>
                <code>inFrontOf</code>
              </entry>
            </row>
            <row xml:id="decimal-type">
              <entry>Decimal</entry>
              <entry>Same as XML Schema's decimal data type</entry>
              <entry>
                <code>1.5</code>
              </entry>
            </row>
            <row xml:id="holder-type">
              <entry morerows="1">Holder</entry>
              <entry morerows="1"><code>('to' | 'from') 'holder' holderId</code></entry>
              <entry>
                <code>from holder 'stitch-holder-1'</code>
              </entry>
            </row>
            <row>
              <entry><code>to holder 'stitch-holder-1'</code></entry>
            </row>
            <row xml:id="id-type">
              <entry>ID</entry>
              <entry>Same as XML Schema's ID data type</entry>
              <entry>
                <code>'make-cuff'</code>
              </entry>
            </row>
            <row xml:id="idref-type">
              <entry>IDREF</entry>
              <entry>Same as XML Schema's IDREF data type</entry>
              <entry>
                <code>'make-cuff'</code>
              </entry>
            </row>
            <row xml:id="integer-type">
              <entry>Integer</entry>
              <entry>Same as XML Schema's short data type</entry>
              <entry>
                <code>3</code>
              </entry>
            </row>
            <row xml:id="length-unit-type">
              <entry>LengthUnit</entry>
              <entry>
                <code>('in' | 'inch' | 'ins' | 'inches' | 'cm' | 'centimeters' | 'mm' |
                  'millimeters' | 'm' | 'meters' | 'yd' | 'yards')</code>
              </entry>
              <entry>
                <code>inch</code>
              </entry>
            </row>
            <row>
              <entry>LoopToWork</entry>
              <entry><code>('tbl')</code></entry>
              <entry><code>tbl</code></entry>
            </row>
            <row xml:id="map-type">
              <entry>Map</entry>
              <entry>Grouping of name / value pairs; always translates to a list of attributes for
                the target element. Each name is taken literally and need not be in quotes (unless
                there is a hyphen in the name).</entry>
              <entry>
                <code>[id:'needle1', typeref:'needle-type1', 'message-key':'needle.needle1']</code>
              </entry>
            </row>
            <row xml:id="map-entry-type">
              <entry>MapEntry</entry>
              <entry>A name / value pair. The name is taken literally and need not be in quotes
                (unless there is a hyphen in the name).</entry>
              <entry>
                <code>needle1:36</code>
              </entry>
            </row>
            <row xml:id="needle-size-type">
              <entry>NeedleSize</entry>
              <entry>
                <code>('US' | 'mm')</code>
              </entry>
              <entry>
                <code>US</code>
              </entry>
            </row>
            <row xml:id="needle-type-type">
              <entry>NeedleType</entry>
              <entry>
                <code>('circ' | 'circular' | 'straight' | 'dpn')</code>
              </entry>
              <entry>
                <code>circ</code>
              </entry>
            </row>
            <row xml:id="repeat-type">
              <entry morerows="3">Repeat</entry>
              <entry morerows="3">
                <code>('to'?, <link xlink:href="#integer-type">Integer</link>?, 'before'|'from'?,
                    <link xlink:href="#until-type">Until</link>)</code> in any order</entry>
              <entry>
                <code>to 2 before end</code>
              </entry>
            </row>
            <row>
              <entry>
                <code>to 2 from end</code>
              </entry>
            </row>
            <row>
              <entry>
                <code>to end</code>
              </entry>
            </row>
            <row>
              <entry><code>8 times</code></entry>
            </row>
            <row xml:id="repeat-inst-type">
              <entry morerows="4">RepeatInst</entry>
              <entry morerows="4">
                <code>('until'?, <link xlink:href="#until-inst-type">UntilInst</link>, (<link
                    xlink:href="#decimal-type">Decimal</link> | <link xlink:href="#integer-type"
                    >Integer</link>)?, <link xlink:href="#stitch-type">Stitch</link>?, <link
                    xlink:href="#length-unit-type">LengthUnit</link>?)</code> in any order</entry>
              <entry>
                <code>until measures 4.5 in</code>
              </entry>
            </row>
            <row>
              <entry>
                <code>for 4.5 in</code>
              </entry>
            </row>
            <row>
              <entry>
                <code>until 20 stitches remain</code>
              </entry>
            </row>
            <row>
              <entry>
                <code>until 1 st remains</code>
              </entry>
            </row>
            <row>
              <entry>
                <code>8 additionalTimes</code>
              </entry>
            </row>
            <row xml:id="row-gauge-unit-type">
              <entry>RowGaugeUnit</entry>
              <entry>
                <code>('rowsPerInch' | 'rowsPerCentimeter')</code>
              </entry>
              <entry>
                <code>rowsPerInch</code>
              </entry>
            </row>
            <row xml:id="side-type">
              <entry>Side</entry>
              <entry>
                <code>('right' | 'wrong')</code>
              </entry>
              <entry>
                <code>wrong</code>
              </entry>
            </row>
            <row xml:id="shape-type">
              <entry>Shape</entry>
              <entry><code>('flat' | 'round')</code></entry>
              <entry><code>round</code></entry>
            </row>
            <row xml:id="state-description-type">
              <entry>StateDescription</entry>
              <entry><code>('rem' | 'remain' | 'remaining' | 'inRow' | 'onNeedle' | 'onNeedles' |
                  'left' | 'unworked')</code></entry>
              <entry><code>remaining</code></entry>
            </row>
            <row xml:id="stitch-type">
              <entry>Stitch</entry>
              <entry>
                <code>('st' | 'sts' | 'stitch' | 'stitches')</code>
              </entry>
              <entry>
                <code>sts</code>
              </entry>
            </row>
            <row xml:id="stitch-gauge-unit-type">
              <entry>StitchGaugeUnit</entry>
              <entry>
                <code>('stitchesPerInch' | 'stitchesPerCentimeter')</code>
              </entry>
              <entry>
                <code>stitchesPerCentimeter</code>
              </entry>
            </row>
            <row xml:id="string-type">
              <entry>String</entry>
              <entry>Same as XML Schema's string data type</entry>
              <entry>
                <code>'hello'</code>
              </entry>
            </row>
            <row xml:id="thickness-unit-type">
              <entry>ThicknessUnit</entry>
              <entry>
                <code>('wrapsPerInch' | 'wrapsPerCentimeter')</code>
              </entry>
              <entry>
                <code>wrapsPerInch</code>
              </entry>
            </row>
            <row xml:id="until-type">
              <entry>Until</entry>
              <entry>
                <code>('end' | 'beforeEnd' | 'beforeGap' | 'marker' | 'beforeMarker' |
                'times')</code>
              </entry>
              <entry>
                <code>marker</code>
              </entry>
            </row>
            <row xml:id="until-inst-type">
              <entry>UntilInst</entry>
              <entry>
                <code>('measures' | 'desiredLength' | 'remain' | 'remains' | 'additionalTimes' |
                  'for')</code>
              </entry>
              <entry>
                <code>desiredLength</code>
              </entry>
            </row>
            <row xml:id="weight-unit-type">
              <entry>WeightUnit</entry>
              <entry>
                <code>('g' | 'grams' | 'oz' | 'ounces')</code>
              </entry>
              <entry>
                <code>grams</code>
              </entry>
            </row>
            <row xml:id="wise-type">
              <entry>Wise</entry>
              <entry>
                <code>('knitwise' | 'purlwise')</code>
              </entry>
              <entry>
                <code>purlwise</code>
              </entry>
            </row>
            <row xml:id="with-type">
              <entry>With</entry>
              <entry>
                <code>('withKey' | 'withLabel')</code>
              </entry>
              <entry>
                <code>withKey</code>
              </entry>
            </row>
            <row xml:id="yarn-position-type">
              <entry>YarnPosition</entry>
              <entry>
                <code>('wyif' | 'wyib')</code>
              </entry>
              <entry>
                <code>wyif</code>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </para>
  </appendix>
</book>
