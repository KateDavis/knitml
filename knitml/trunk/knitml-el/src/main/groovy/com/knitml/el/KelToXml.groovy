package com.knitml.elimport com.knitml.core.units.KnittingMeasureimport com.knitml.core.units.Unitsimport com.knitml.el.KelToGroovyimport com.knitml.el.definition.KnittingDefinitionsimport org.slf4j.Loggerimport org.slf4j.LoggerFactoryimport static com.knitml.core.xml.Schemas.CURRENT_PATTERN_SCHEMAimport static com.knitml.core.model.Version.getCurrentVersionIdclass KelToXml {	private static final Logger log = LoggerFactory.getLogger(KelToXml.class)	    void createKnitML(dsl, targetBuilder) {    	    	def builder = targetBuilder   		def translator = new KelToGroovy()   		def dataToParse = translator.toGroovy(dsl.text)   		log.info("Converted KEL format to the following Groovy format: {}", dataToParse)        Script dslScript = new GroovyShell().parse(dataToParse)   		def attrs = [:]   		attrs.put('xmlns:pattern','http://www.knitml.com/schema/pattern')   		attrs.put('xmlns','http://www.knitml.com/schema/operations')   		attrs.put('xmlns:common','http://www.knitml.com/schema/common')   		attrs.put('xmlns:xsi','http://www.w3.org/2001/XMLSchema-instance')   		attrs.put('xsi:schemaLocation','http://www.knitml.com/schema/pattern '+ CURRENT_PATTERN_SCHEMA)   		attrs.put('version',getCurrentVersionId())                dslScript.metaClass = createEMC(dslScript.class, {            ExpandoMetaClass emc ->            emc.pattern = { String languageCode, Closure cl ->            		attrs.put('xml:lang',languageCode)                	cl.delegate = new KnittingDefinitions(builder)                	cl.resolveStrategy = Closure.DELEGATE_FIRST                	builder.'pattern:pattern' (attrs) { cl() }            }            emc.pattern = { Closure cl ->            	ExpandoMetaClass.enableGlobally()              	Number.metaClass.getProperty = { String symbol -> KnittingMeasure.valueOf(delegate, Units.valueOf(symbol)) }            	cl.delegate = new KnittingDefinitions(builder)            	cl.resolveStrategy = Closure.DELEGATE_FIRST            	builder.'pattern:pattern' (attrs) { cl() }            }        })        dslScript.run()    }    static ExpandoMetaClass createEMC(Class<?> clazz, Closure cl) {        ExpandoMetaClass emc = new ExpandoMetaClass(clazz, false)        cl(emc)        emc.initialize()        return emc    }		}